{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IBM: DATA SCIENCE CAPSTONE PROJECT - BATTLE OF THE NEIGHBOURHOODS\n",
    "\n",
    "# Introduction/Business Problem\n",
    "### This study will focus on helping the investors of a major condominium real-estate developer who are planning on expanding their enterprise to Toronto. The group, however, has no prior knowledge of Toronto's neighbourhoods, and demographic patterns. Our team has been approached by the investors with the task of finding the optimal location in Toronto where they should focus on constructing their new luxury-condominium project.\n",
    "\n",
    "The investors will be looking for areas in Toronto that meet the following specifications:\n",
    "    - The neighbourhood must be within a certain range of total population\n",
    "    - Additionally, an above average population of 25â€“54 year-old working professionals must be met\n",
    "    - The neighbourhood should be populated with an above average number of individuals with higher education\n",
    "    - An above average avg. household income \n",
    "\n",
    "### Steps:\n",
    "### 1 - Cleaning & Preprocessing\n",
    "    Cleaning (completed in R)\n",
    "    Data-Types\n",
    "    Check for duplicates/NAN\n",
    "    Feature Selection\n",
    "### 2 - Data Exploration & Normalization \n",
    "    Check distributions\n",
    "    Give neighbourhoods a standardized score\n",
    "### 3 - KMeans Clustering\n",
    "    Select top-20 neighbourhood to run KMeans    \n",
    "### 4 - Create Toronto Map\n",
    "    Use Folium package\n",
    "    Apply clusters are markers on final map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Libraries imported.\n"
     ]
    }
   ],
   "source": [
    "#importing libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "\n",
    "from sklearn import preprocessing\n",
    "\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors\n",
    "!conda install -c conda-forge folium=0.5.0 --yes\n",
    "import folium\n",
    "\n",
    "print('Libraries imported.')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 - Cleaning & Preprocessing \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the Toronto neighbourhood census data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Population 2011</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Total Income</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Secondary Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Emploment Rate (Male)</th>\n",
       "      <th>Employement Rate (Female)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>City.of.Toronto</td>\n",
       "      <td>2,731,571</td>\n",
       "      <td>2,615,060</td>\n",
       "      <td>1,229,555</td>\n",
       "      <td>2,294,785</td>\n",
       "      <td>52,268</td>\n",
       "      <td>2294785</td>\n",
       "      <td>59.3</td>\n",
       "      <td>63.8</td>\n",
       "      <td>55.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29,113</td>\n",
       "      <td>30,279</td>\n",
       "      <td>11,305</td>\n",
       "      <td>25,005</td>\n",
       "      <td>30,414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>54.5</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23,757</td>\n",
       "      <td>21,988</td>\n",
       "      <td>9,965</td>\n",
       "      <td>20,400</td>\n",
       "      <td>31,825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "      <td>58.2</td>\n",
       "      <td>48.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12,054</td>\n",
       "      <td>11,904</td>\n",
       "      <td>5,220</td>\n",
       "      <td>10,265</td>\n",
       "      <td>47,709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "      <td>67.1</td>\n",
       "      <td>57.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30,526</td>\n",
       "      <td>29,177</td>\n",
       "      <td>15,040</td>\n",
       "      <td>26,295</td>\n",
       "      <td>112,766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "      <td>68.9</td>\n",
       "      <td>63.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Unnamed: 0 Population 2016 Population 2011  \\\n",
       "0               City.of.Toronto       2,731,571       2,615,060   \n",
       "1               Agincourt.North          29,113          30,279   \n",
       "2  Agincourt.South.Malvern.West          23,757          21,988   \n",
       "3                     Alderwood          12,054          11,904   \n",
       "4                         Annex          30,526          29,177   \n",
       "\n",
       "  Working Age (25-54) Total Income Avg. Total Income  \\\n",
       "0           1,229,555    2,294,785            52,268   \n",
       "1              11,305       25,005            30,414   \n",
       "2               9,965       20,400            31,825   \n",
       "3               5,220       10,265            47,709   \n",
       "4              15,040       26,295           112,766   \n",
       "\n",
       "   Total Secondary Education  Total Employment Rate  Emploment Rate (Male)  \\\n",
       "0                    2294785                   59.3                   63.8   \n",
       "1                      25000                   50.0                   54.5   \n",
       "2                      20400                   53.2                   58.2   \n",
       "3                      10265                   62.4                   67.1   \n",
       "4                      26290                   65.8                   68.9   \n",
       "\n",
       "   Employement Rate (Female)  \n",
       "0                       55.2  \n",
       "1                       46.0  \n",
       "2                       48.7  \n",
       "3                       57.9  \n",
       "4                       63.1  "
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import .csv file\n",
    "neighbourhood_df = pd.read_csv(\"neighbourhood_profiles.csv\")\n",
    "neighbourhood_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Secondary Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29,113</td>\n",
       "      <td>11,305</td>\n",
       "      <td>30,414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23,757</td>\n",
       "      <td>9,965</td>\n",
       "      <td>31,825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12,054</td>\n",
       "      <td>5,220</td>\n",
       "      <td>47,709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30,526</td>\n",
       "      <td>15,040</td>\n",
       "      <td>112,766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Banbury.Don.Mills</td>\n",
       "      <td>27,695</td>\n",
       "      <td>10,810</td>\n",
       "      <td>67,757</td>\n",
       "      <td>23390</td>\n",
       "      <td>55.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Unnamed: 0 Population 2016 Working Age (25-54)  \\\n",
       "1               Agincourt.North          29,113              11,305   \n",
       "2  Agincourt.South.Malvern.West          23,757               9,965   \n",
       "3                     Alderwood          12,054               5,220   \n",
       "4                         Annex          30,526              15,040   \n",
       "5             Banbury.Don.Mills          27,695              10,810   \n",
       "\n",
       "  Avg. Total Income  Total Secondary Education  Total Employment Rate  \n",
       "1            30,414                      25000                   50.0  \n",
       "2            31,825                      20400                   53.2  \n",
       "3            47,709                      10265                   62.4  \n",
       "4           112,766                      26290                   65.8  \n",
       "5            67,757                      23390                   55.6  "
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop unnecessary first row & columns\n",
    "neighbourhood_df.drop(neighbourhood_df.index[0],inplace=True)\n",
    "neighbourhood_df.drop(['Population 2011',\n",
    "                           'Total Income',\n",
    "                           'Emploment Rate (Male)',\n",
    "                           'Employement Rate (Female)'], axis=1, inplace=True)\n",
    "neighbourhood_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29,113</td>\n",
       "      <td>11,305</td>\n",
       "      <td>30,414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23,757</td>\n",
       "      <td>9,965</td>\n",
       "      <td>31,825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12,054</td>\n",
       "      <td>5,220</td>\n",
       "      <td>47,709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30,526</td>\n",
       "      <td>15,040</td>\n",
       "      <td>112,766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Banbury.Don.Mills</td>\n",
       "      <td>27,695</td>\n",
       "      <td>10,810</td>\n",
       "      <td>67,757</td>\n",
       "      <td>23390</td>\n",
       "      <td>55.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Neighbourhood Population 2016 Working Age (25-54)  \\\n",
       "0               Agincourt.North          29,113              11,305   \n",
       "1  Agincourt.South.Malvern.West          23,757               9,965   \n",
       "2                     Alderwood          12,054               5,220   \n",
       "3                         Annex          30,526              15,040   \n",
       "4             Banbury.Don.Mills          27,695              10,810   \n",
       "\n",
       "  Avg. Total Income  Total Higher Education  Total Employment Rate  \n",
       "0            30,414                   25000                   50.0  \n",
       "1            31,825                   20400                   53.2  \n",
       "2            47,709                   10265                   62.4  \n",
       "3           112,766                   26290                   65.8  \n",
       "4            67,757                   23390                   55.6  "
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reset index & rename\n",
    "neighbourhood_df.reset_index(drop=True, inplace=True)\n",
    "neighbourhood_df.rename({'Unnamed: 0': 'Neighbourhood', \n",
    "                         'Total Secondary Education': 'Total Higher Education'}, axis='columns', inplace=True)\n",
    "\n",
    "neighbourhood_df.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Toronto neighbourhood coordinate data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AREA_NAME</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Wychwood (94)</td>\n",
       "      <td>-79.425515</td>\n",
       "      <td>43.676919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Yonge-Eglinton (100)</td>\n",
       "      <td>-79.403590</td>\n",
       "      <td>43.704689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Yonge-St.Clair (97)</td>\n",
       "      <td>-79.397871</td>\n",
       "      <td>43.687859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>York University Heights (27)</td>\n",
       "      <td>-79.488883</td>\n",
       "      <td>43.765736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Yorkdale-Glen Park (31)</td>\n",
       "      <td>-79.457108</td>\n",
       "      <td>43.714672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      AREA_NAME  LONGITUDE   LATITUDE\n",
       "0                 Wychwood (94) -79.425515  43.676919\n",
       "1          Yonge-Eglinton (100) -79.403590  43.704689\n",
       "2           Yonge-St.Clair (97) -79.397871  43.687859\n",
       "3  York University Heights (27) -79.488883  43.765736\n",
       "4       Yorkdale-Glen Park (31) -79.457108  43.714672"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop unnecessary columns\n",
    "coord_df = pd.read_csv('neighbourhood_coordinates.csv')\n",
    "coord_df.drop(['_id',\n",
    "               'AREA_ID',\n",
    "               'AREA_ATTR_ID',\n",
    "               'PARENT_AREA_ID',\n",
    "               'AREA_SHORT_CODE',\n",
    "               'AREA_LONG_CODE',\n",
    "               'AREA_DESC',\n",
    "               'X',\n",
    "               'Y',\n",
    "               'OBJECTID',\n",
    "               'Shape__Area',\n",
    "               'Shape__Length',\n",
    "               'geometry'], axis=1, inplace=True)\n",
    "coord_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AREA_NAME</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>74</td>\n",
       "      <td>Agincourt North (129)</td>\n",
       "      <td>-79.266712</td>\n",
       "      <td>43.805441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>Agincourt South-Malvern West (128)</td>\n",
       "      <td>-79.265612</td>\n",
       "      <td>43.788658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>76</td>\n",
       "      <td>Alderwood (20)</td>\n",
       "      <td>-79.541611</td>\n",
       "      <td>43.604937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>Annex (95)</td>\n",
       "      <td>-79.404001</td>\n",
       "      <td>43.671585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>Banbury-Don Mills (42)</td>\n",
       "      <td>-79.349718</td>\n",
       "      <td>43.737657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             AREA_NAME  LONGITUDE   LATITUDE\n",
       "74               Agincourt North (129) -79.266712  43.805441\n",
       "75  Agincourt South-Malvern West (128) -79.265612  43.788658\n",
       "76                      Alderwood (20) -79.541611  43.604937\n",
       "77                          Annex (95) -79.404001  43.671585\n",
       "78              Banbury-Don Mills (42) -79.349718  43.737657"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sort coordinates by alphabetical order\n",
    "coord_df.sort_values('AREA_NAME', inplace=True, ascending=True)\n",
    "coord_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AREA_NAME</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Agincourt North (129)</td>\n",
       "      <td>-79.266712</td>\n",
       "      <td>43.805441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt South-Malvern West (128)</td>\n",
       "      <td>-79.265612</td>\n",
       "      <td>43.788658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Alderwood (20)</td>\n",
       "      <td>-79.541611</td>\n",
       "      <td>43.604937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Annex (95)</td>\n",
       "      <td>-79.404001</td>\n",
       "      <td>43.671585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Banbury-Don Mills (42)</td>\n",
       "      <td>-79.349718</td>\n",
       "      <td>43.737657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            AREA_NAME  LONGITUDE   LATITUDE\n",
       "0               Agincourt North (129) -79.266712  43.805441\n",
       "1  Agincourt South-Malvern West (128) -79.265612  43.788658\n",
       "2                      Alderwood (20) -79.541611  43.604937\n",
       "3                          Annex (95) -79.404001  43.671585\n",
       "4              Banbury-Don Mills (42) -79.349718  43.737657"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reset index to match nb_df dataframe\n",
    "coord_df.reset_index(drop=True, inplace=True)\n",
    "coord_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SInce both neighbourhood census and coordinate data come from the same source, they have the exact same list of neighbourhoods\n",
    "### Merge the two dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>AREA_NAME</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>LATITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29,113</td>\n",
       "      <td>11,305</td>\n",
       "      <td>30,414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>Agincourt North (129)</td>\n",
       "      <td>-79.266712</td>\n",
       "      <td>43.805441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23,757</td>\n",
       "      <td>9,965</td>\n",
       "      <td>31,825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "      <td>Agincourt South-Malvern West (128)</td>\n",
       "      <td>-79.265612</td>\n",
       "      <td>43.788658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12,054</td>\n",
       "      <td>5,220</td>\n",
       "      <td>47,709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "      <td>Alderwood (20)</td>\n",
       "      <td>-79.541611</td>\n",
       "      <td>43.604937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30,526</td>\n",
       "      <td>15,040</td>\n",
       "      <td>112,766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "      <td>Annex (95)</td>\n",
       "      <td>-79.404001</td>\n",
       "      <td>43.671585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Banbury.Don.Mills</td>\n",
       "      <td>27,695</td>\n",
       "      <td>10,810</td>\n",
       "      <td>67,757</td>\n",
       "      <td>23390</td>\n",
       "      <td>55.6</td>\n",
       "      <td>Banbury-Don Mills (42)</td>\n",
       "      <td>-79.349718</td>\n",
       "      <td>43.737657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Neighbourhood Population 2016 Working Age (25-54)  \\\n",
       "0               Agincourt.North          29,113              11,305   \n",
       "1  Agincourt.South.Malvern.West          23,757               9,965   \n",
       "2                     Alderwood          12,054               5,220   \n",
       "3                         Annex          30,526              15,040   \n",
       "4             Banbury.Don.Mills          27,695              10,810   \n",
       "\n",
       "  Avg. Total Income  Total Higher Education  Total Employment Rate  \\\n",
       "0            30,414                   25000                   50.0   \n",
       "1            31,825                   20400                   53.2   \n",
       "2            47,709                   10265                   62.4   \n",
       "3           112,766                   26290                   65.8   \n",
       "4            67,757                   23390                   55.6   \n",
       "\n",
       "                            AREA_NAME  LONGITUDE   LATITUDE  \n",
       "0               Agincourt North (129) -79.266712  43.805441  \n",
       "1  Agincourt South-Malvern West (128) -79.265612  43.788658  \n",
       "2                      Alderwood (20) -79.541611  43.604937  \n",
       "3                          Annex (95) -79.404001  43.671585  \n",
       "4              Banbury-Don Mills (42) -79.349718  43.737657  "
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#merge coordinate and neighbourhood dataframes\n",
    "nb_coord_df= pd.merge(neighbourhood_df, coord_df, left_index=True, right_index=True, how='inner')\n",
    "nb_coord_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Long</th>\n",
       "      <th>Lat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29,113</td>\n",
       "      <td>11,305</td>\n",
       "      <td>30,414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>-79.266712</td>\n",
       "      <td>43.805441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23,757</td>\n",
       "      <td>9,965</td>\n",
       "      <td>31,825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "      <td>-79.265612</td>\n",
       "      <td>43.788658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12,054</td>\n",
       "      <td>5,220</td>\n",
       "      <td>47,709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "      <td>-79.541611</td>\n",
       "      <td>43.604937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30,526</td>\n",
       "      <td>15,040</td>\n",
       "      <td>112,766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "      <td>-79.404001</td>\n",
       "      <td>43.671585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Banbury.Don.Mills</td>\n",
       "      <td>27,695</td>\n",
       "      <td>10,810</td>\n",
       "      <td>67,757</td>\n",
       "      <td>23390</td>\n",
       "      <td>55.6</td>\n",
       "      <td>-79.349718</td>\n",
       "      <td>43.737657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Neighbourhood Population 2016 Working Age (25-54)  \\\n",
       "0               Agincourt.North          29,113              11,305   \n",
       "1  Agincourt.South.Malvern.West          23,757               9,965   \n",
       "2                     Alderwood          12,054               5,220   \n",
       "3                         Annex          30,526              15,040   \n",
       "4             Banbury.Don.Mills          27,695              10,810   \n",
       "\n",
       "  Avg. Total Income  Total Higher Education  Total Employment Rate       Long  \\\n",
       "0            30,414                   25000                   50.0 -79.266712   \n",
       "1            31,825                   20400                   53.2 -79.265612   \n",
       "2            47,709                   10265                   62.4 -79.541611   \n",
       "3           112,766                   26290                   65.8 -79.404001   \n",
       "4            67,757                   23390                   55.6 -79.349718   \n",
       "\n",
       "         Lat  \n",
       "0  43.805441  \n",
       "1  43.788658  \n",
       "2  43.604937  \n",
       "3  43.671585  \n",
       "4  43.737657  "
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#clean up new dataframe\n",
    "nb_coord_df.drop('AREA_NAME', axis=1, inplace=True)\n",
    "\n",
    "#rename columns\n",
    "nb_coord_df.rename({'LONGITUDE': 'Long', \n",
    "                'LATITUDE': 'Lat'}, axis='columns', inplace=True)\n",
    "\n",
    "nb_coord_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2 - Data Exploration & Normalization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Review Data-Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data type of each column of Dataframe :\n",
      "Neighbourhood              object\n",
      "Population 2016            object\n",
      "Working Age (25-54)        object\n",
      "Avg. Total Income          object\n",
      "Total Higher Education      int64\n",
      "Total Employment Rate     float64\n",
      "Long                      float64\n",
      "Lat                       float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#check datatypes of each column first\n",
    "\n",
    "DataFrameTypes = nb_coord_df.dtypes\n",
    "\n",
    "print('Data type of each column of Dataframe :')\n",
    "print(DataFrameTypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change Population 2016 to integer-type\n",
    "\n",
    "nb_coord_df['Population 2016'] = nb_coord_df['Population 2016'].str.replace(',', '')\n",
    "nb_coord_df[\"Population 2016\"] = nb_coord_df['Population 2016'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change Working Age (25-54) to integer-type\n",
    "\n",
    "nb_coord_df['Working Age (25-54)'] = nb_coord_df['Working Age (25-54)'].str.replace(',', '')\n",
    "nb_coord_df['Working Age (25-54)'] = nb_coord_df['Working Age (25-54)'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "#change Avg. Total Income to integer-type\n",
    "\n",
    "nb_coord_df['Avg. Total Income'] = nb_coord_df['Avg. Total Income'].str.replace(',', '')\n",
    "nb_coord_df['Avg. Total Income'] = nb_coord_df['Avg. Total Income'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data type of each column of Dataframe :\n",
      "Neighbourhood              object\n",
      "Population 2016             int64\n",
      "Working Age (25-54)         int64\n",
      "Avg. Total Income           int64\n",
      "Total Higher Education      int64\n",
      "Total Employment Rate     float64\n",
      "Long                      float64\n",
      "Lat                       float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#check datatypes again\n",
    "\n",
    "DataFrameTypes = nb_coord_df.dtypes\n",
    "print('Data type of each column of Dataframe :')\n",
    "print(DataFrameTypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalize Scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.379803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.289538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.092305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.403617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.355905</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0  0.379803\n",
       "1  0.289538\n",
       "2  0.092305\n",
       "3  0.403617\n",
       "4  0.355905"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Population 2016 normalized score\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "int_array = nb_coord_df['Population 2016'].values\n",
    "int_array_reshape = int_array.reshape(-1, 1)\n",
    "\n",
    "scaled_population_df = scaler.fit_transform(int_array_reshape)\n",
    "scaled_population_df = pd.DataFrame(scaled_population_df)\n",
    "scaled_population_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.201983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.170346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.058317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.290166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.190296</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0  0.201983\n",
       "1  0.170346\n",
       "2  0.058317\n",
       "3  0.290166\n",
       "4  0.190296"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Working Age (25-54) normalized score\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "int_array = nb_coord_df['Working Age (25-54)'].values\n",
    "int_array_reshape = int_array.reshape(-1, 1)\n",
    "\n",
    "scaled_workingage_df = scaler.fit_transform(int_array_reshape)\n",
    "scaled_workingage_df = pd.DataFrame(scaled_workingage_df)\n",
    "scaled_workingage_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.015690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.020693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.077016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.307697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.148102</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0  0.015690\n",
       "1  0.020693\n",
       "2  0.077016\n",
       "3  0.307697\n",
       "4  0.148102"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Avg. Total Income normalized score\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "int_array = nb_coord_df['Avg. Total Income'].values\n",
    "int_array_reshape = int_array.reshape(-1, 1)\n",
    "\n",
    "scaled_income_df = scaler.fit_transform(int_array_reshape)\n",
    "scaled_income_df = pd.DataFrame(scaled_income_df)\n",
    "scaled_income_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.348022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.266943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.088305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.370759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.319644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0  0.348022\n",
       "1  0.266943\n",
       "2  0.088305\n",
       "3  0.370759\n",
       "4  0.319644"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Total Higher Education normalized score\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "int_array = nb_coord_df['Total Higher Education'].values\n",
    "int_array_reshape = int_array.reshape(-1, 1)\n",
    "\n",
    "scaled_education_df = scaler.fit_transform(int_array_reshape)\n",
    "scaled_education_df = pd.DataFrame(scaled_education_df)\n",
    "scaled_education_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.076271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.426554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.522599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.234463</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0\n",
       "0  0.076271\n",
       "1  0.166667\n",
       "2  0.426554\n",
       "3  0.522599\n",
       "4  0.234463"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Total Employment Rate normalized score\n",
    "\n",
    "scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "int_array = nb_coord_df['Total Employment Rate'].values\n",
    "int_array_reshape = int_array.reshape(-1, 1)\n",
    "\n",
    "scaled_employment_df = scaler.fit_transform(int_array_reshape)\n",
    "scaled_employment_df = pd.DataFrame(scaled_employment_df)\n",
    "scaled_employment_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Combine the 5 normalized dataframes into one new dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.379803</td>\n",
       "      <td>0.201983</td>\n",
       "      <td>0.015690</td>\n",
       "      <td>0.348022</td>\n",
       "      <td>0.076271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.289538</td>\n",
       "      <td>0.170346</td>\n",
       "      <td>0.020693</td>\n",
       "      <td>0.266943</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.092305</td>\n",
       "      <td>0.058317</td>\n",
       "      <td>0.077016</td>\n",
       "      <td>0.088305</td>\n",
       "      <td>0.426554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.403617</td>\n",
       "      <td>0.290166</td>\n",
       "      <td>0.307697</td>\n",
       "      <td>0.370759</td>\n",
       "      <td>0.522599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.355905</td>\n",
       "      <td>0.190296</td>\n",
       "      <td>0.148102</td>\n",
       "      <td>0.319644</td>\n",
       "      <td>0.234463</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Population 2016  Working Age (25-54)  Avg. Total Income  \\\n",
       "0         0.379803             0.201983           0.015690   \n",
       "1         0.289538             0.170346           0.020693   \n",
       "2         0.092305             0.058317           0.077016   \n",
       "3         0.403617             0.290166           0.307697   \n",
       "4         0.355905             0.190296           0.148102   \n",
       "\n",
       "   Total Higher Education  Total Employment Rate  \n",
       "0                0.348022               0.076271  \n",
       "1                0.266943               0.166667  \n",
       "2                0.088305               0.426554  \n",
       "3                0.370759               0.522599  \n",
       "4                0.319644               0.234463  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#merge columns and rename \n",
    "\n",
    "scores_df = pd.merge(scaled_population_df, scaled_workingage_df, left_index=True, right_index=True, how='inner')\n",
    "scores_df = pd.merge(scores_df, scaled_income_df, left_index=True, right_index=True, how='inner')\n",
    "scores_df = pd.merge(scores_df, scaled_education_df, left_index=True, right_index=True, how='inner')\n",
    "scores_df = pd.merge(scores_df, scaled_employment_df, left_index=True, right_index=True, how='inner')\n",
    "\n",
    "scores_df.columns = [\"Population 2016\",\n",
    "                     \"Working Age (25-54)\",\n",
    "                     \"Avg. Total Income\",\n",
    "                     \"Total Higher Education\",\n",
    "                     \"Total Employment Rate\"]\n",
    "\n",
    "scores_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Total Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.379803</td>\n",
       "      <td>0.201983</td>\n",
       "      <td>0.015690</td>\n",
       "      <td>0.348022</td>\n",
       "      <td>0.076271</td>\n",
       "      <td>1.021769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.289538</td>\n",
       "      <td>0.170346</td>\n",
       "      <td>0.020693</td>\n",
       "      <td>0.266943</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.914186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.092305</td>\n",
       "      <td>0.058317</td>\n",
       "      <td>0.077016</td>\n",
       "      <td>0.088305</td>\n",
       "      <td>0.426554</td>\n",
       "      <td>0.742496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.403617</td>\n",
       "      <td>0.290166</td>\n",
       "      <td>0.307697</td>\n",
       "      <td>0.370759</td>\n",
       "      <td>0.522599</td>\n",
       "      <td>1.894838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.355905</td>\n",
       "      <td>0.190296</td>\n",
       "      <td>0.148102</td>\n",
       "      <td>0.319644</td>\n",
       "      <td>0.234463</td>\n",
       "      <td>1.248411</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Population 2016  Working Age (25-54)  Avg. Total Income  \\\n",
       "0         0.379803             0.201983           0.015690   \n",
       "1         0.289538             0.170346           0.020693   \n",
       "2         0.092305             0.058317           0.077016   \n",
       "3         0.403617             0.290166           0.307697   \n",
       "4         0.355905             0.190296           0.148102   \n",
       "\n",
       "   Total Higher Education  Total Employment Rate  Total Score  \n",
       "0                0.348022               0.076271     1.021769  \n",
       "1                0.266943               0.166667     0.914186  \n",
       "2                0.088305               0.426554     0.742496  \n",
       "3                0.370759               0.522599     1.894838  \n",
       "4                0.319644               0.234463     1.248411  "
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#append column for total score (sum)\n",
    "\n",
    "scores_df['Total Score'] = scores_df.sum(axis=1)\n",
    "scores_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Long</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Total Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Agincourt.North</td>\n",
       "      <td>29113</td>\n",
       "      <td>11305</td>\n",
       "      <td>30414</td>\n",
       "      <td>25000</td>\n",
       "      <td>50.0</td>\n",
       "      <td>-79.266712</td>\n",
       "      <td>43.805441</td>\n",
       "      <td>1.021769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Agincourt.South.Malvern.West</td>\n",
       "      <td>23757</td>\n",
       "      <td>9965</td>\n",
       "      <td>31825</td>\n",
       "      <td>20400</td>\n",
       "      <td>53.2</td>\n",
       "      <td>-79.265612</td>\n",
       "      <td>43.788658</td>\n",
       "      <td>0.914186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Alderwood</td>\n",
       "      <td>12054</td>\n",
       "      <td>5220</td>\n",
       "      <td>47709</td>\n",
       "      <td>10265</td>\n",
       "      <td>62.4</td>\n",
       "      <td>-79.541611</td>\n",
       "      <td>43.604937</td>\n",
       "      <td>0.742496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Annex</td>\n",
       "      <td>30526</td>\n",
       "      <td>15040</td>\n",
       "      <td>112766</td>\n",
       "      <td>26290</td>\n",
       "      <td>65.8</td>\n",
       "      <td>-79.404001</td>\n",
       "      <td>43.671585</td>\n",
       "      <td>1.894838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Banbury.Don.Mills</td>\n",
       "      <td>27695</td>\n",
       "      <td>10810</td>\n",
       "      <td>67757</td>\n",
       "      <td>23390</td>\n",
       "      <td>55.6</td>\n",
       "      <td>-79.349718</td>\n",
       "      <td>43.737657</td>\n",
       "      <td>1.248411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>135</td>\n",
       "      <td>Wychwood</td>\n",
       "      <td>14349</td>\n",
       "      <td>6420</td>\n",
       "      <td>54460</td>\n",
       "      <td>11385</td>\n",
       "      <td>65.6</td>\n",
       "      <td>-79.425515</td>\n",
       "      <td>43.676919</td>\n",
       "      <td>0.943580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>136</td>\n",
       "      <td>Yonge.Eglinton</td>\n",
       "      <td>11817</td>\n",
       "      <td>5860</td>\n",
       "      <td>89330</td>\n",
       "      <td>10000</td>\n",
       "      <td>68.2</td>\n",
       "      <td>-79.403590</td>\n",
       "      <td>43.704689</td>\n",
       "      <td>1.060364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>137</td>\n",
       "      <td>Yonge.St.Clair</td>\n",
       "      <td>12528</td>\n",
       "      <td>5960</td>\n",
       "      <td>114174</td>\n",
       "      <td>11100</td>\n",
       "      <td>65.2</td>\n",
       "      <td>-79.397871</td>\n",
       "      <td>43.687859</td>\n",
       "      <td>1.097443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>138</td>\n",
       "      <td>York.University.Heights</td>\n",
       "      <td>27593</td>\n",
       "      <td>12290</td>\n",
       "      <td>29958</td>\n",
       "      <td>23520</td>\n",
       "      <td>56.3</td>\n",
       "      <td>-79.488883</td>\n",
       "      <td>43.765736</td>\n",
       "      <td>1.169671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>139</td>\n",
       "      <td>Yorkdale.Glen.Park</td>\n",
       "      <td>14804</td>\n",
       "      <td>5860</td>\n",
       "      <td>38527</td>\n",
       "      <td>12065</td>\n",
       "      <td>55.3</td>\n",
       "      <td>-79.457108</td>\n",
       "      <td>43.714672</td>\n",
       "      <td>0.602556</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>140 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Neighbourhood  Population 2016  Working Age (25-54)  \\\n",
       "0                 Agincourt.North            29113                11305   \n",
       "1    Agincourt.South.Malvern.West            23757                 9965   \n",
       "2                       Alderwood            12054                 5220   \n",
       "3                           Annex            30526                15040   \n",
       "4               Banbury.Don.Mills            27695                10810   \n",
       "..                            ...              ...                  ...   \n",
       "135                      Wychwood            14349                 6420   \n",
       "136                Yonge.Eglinton            11817                 5860   \n",
       "137                Yonge.St.Clair            12528                 5960   \n",
       "138       York.University.Heights            27593                12290   \n",
       "139            Yorkdale.Glen.Park            14804                 5860   \n",
       "\n",
       "     Avg. Total Income  Total Higher Education  Total Employment Rate  \\\n",
       "0                30414                   25000                   50.0   \n",
       "1                31825                   20400                   53.2   \n",
       "2                47709                   10265                   62.4   \n",
       "3               112766                   26290                   65.8   \n",
       "4                67757                   23390                   55.6   \n",
       "..                 ...                     ...                    ...   \n",
       "135              54460                   11385                   65.6   \n",
       "136              89330                   10000                   68.2   \n",
       "137             114174                   11100                   65.2   \n",
       "138              29958                   23520                   56.3   \n",
       "139              38527                   12065                   55.3   \n",
       "\n",
       "          Long        Lat  Total Score  \n",
       "0   -79.266712  43.805441     1.021769  \n",
       "1   -79.265612  43.788658     0.914186  \n",
       "2   -79.541611  43.604937     0.742496  \n",
       "3   -79.404001  43.671585     1.894838  \n",
       "4   -79.349718  43.737657     1.248411  \n",
       "..         ...        ...          ...  \n",
       "135 -79.425515  43.676919     0.943580  \n",
       "136 -79.403590  43.704689     1.060364  \n",
       "137 -79.397871  43.687859     1.097443  \n",
       "138 -79.488883  43.765736     1.169671  \n",
       "139 -79.457108  43.714672     0.602556  \n",
       "\n",
       "[140 rows x 9 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#append Total Score to nb_coord_df\n",
    "\n",
    "score_list = scores_df['Total Score']\n",
    "\n",
    "nb_coord_df['Total Score'] = score_list\n",
    "nb_coord_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3 - KMeans Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Long</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Total Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Waterfront.Communities.The.Island</td>\n",
       "      <td>65913</td>\n",
       "      <td>45105</td>\n",
       "      <td>70600</td>\n",
       "      <td>61990</td>\n",
       "      <td>78.2</td>\n",
       "      <td>-79.377202</td>\n",
       "      <td>43.633880</td>\n",
       "      <td>4.031065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Niagara</td>\n",
       "      <td>31180</td>\n",
       "      <td>23320</td>\n",
       "      <td>70623</td>\n",
       "      <td>28390</td>\n",
       "      <td>82.7</td>\n",
       "      <td>-79.412420</td>\n",
       "      <td>43.636681</td>\n",
       "      <td>2.466333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Willowdale.East</td>\n",
       "      <td>50434</td>\n",
       "      <td>25850</td>\n",
       "      <td>45326</td>\n",
       "      <td>44330</td>\n",
       "      <td>55.9</td>\n",
       "      <td>-79.401484</td>\n",
       "      <td>43.770602</td>\n",
       "      <td>2.284752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Islington.City.Centre.West</td>\n",
       "      <td>43965</td>\n",
       "      <td>20640</td>\n",
       "      <td>52787</td>\n",
       "      <td>37405</td>\n",
       "      <td>63.6</td>\n",
       "      <td>-79.543317</td>\n",
       "      <td>43.633463</td>\n",
       "      <td>2.174632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Woburn</td>\n",
       "      <td>53485</td>\n",
       "      <td>21945</td>\n",
       "      <td>30878</td>\n",
       "      <td>43410</td>\n",
       "      <td>51.9</td>\n",
       "      <td>-79.228586</td>\n",
       "      <td>43.766740</td>\n",
       "      <td>2.063534</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Neighbourhood  Population 2016  Working Age (25-54)  \\\n",
       "0  Waterfront.Communities.The.Island            65913                45105   \n",
       "1                            Niagara            31180                23320   \n",
       "2                    Willowdale.East            50434                25850   \n",
       "3         Islington.City.Centre.West            43965                20640   \n",
       "4                             Woburn            53485                21945   \n",
       "\n",
       "   Avg. Total Income  Total Higher Education  Total Employment Rate  \\\n",
       "0              70600                   61990                   78.2   \n",
       "1              70623                   28390                   82.7   \n",
       "2              45326                   44330                   55.9   \n",
       "3              52787                   37405                   63.6   \n",
       "4              30878                   43410                   51.9   \n",
       "\n",
       "        Long        Lat  Total Score  \n",
       "0 -79.377202  43.633880     4.031065  \n",
       "1 -79.412420  43.636681     2.466333  \n",
       "2 -79.401484  43.770602     2.284752  \n",
       "3 -79.543317  43.633463     2.174632  \n",
       "4 -79.228586  43.766740     2.063534  "
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Pick top-20 neighbourhoods by total score\n",
    "\n",
    "neighbourhood_top20_df = nb_coord_df.nlargest(20,['Total Score'])\n",
    "neighbourhood_top20_df.reset_index(drop=True, inplace=True)\n",
    "neighbourhood_top20_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.03106461],\n",
       "       [2.4663334 ],\n",
       "       [2.28475182],\n",
       "       [2.17463163],\n",
       "       [2.06353364],\n",
       "       [2.01412936],\n",
       "       [1.93029842],\n",
       "       [1.91836561],\n",
       "       [1.89483775],\n",
       "       [1.89381241],\n",
       "       [1.84043757],\n",
       "       [1.76831429],\n",
       "       [1.64665135],\n",
       "       [1.61365316],\n",
       "       [1.59521708],\n",
       "       [1.5277349 ],\n",
       "       [1.51743306],\n",
       "       [1.49082532],\n",
       "       [1.45301892],\n",
       "       [1.433451  ]])"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "topscore_top20_array = neighbourhood_top20_df['Total Score'].values\n",
    "topscore_top20_array_reshape = topscore_top20_array.reshape(-1, 1)\n",
    "\n",
    "topscore_top20_array_reshape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#run k-means clustering\n",
    "kmeans = KMeans(n_clusters=3)\n",
    "kmeans_scores = kmeans.fit(topscore_top20_array_reshape)\n",
    "\n",
    "#check cluster labels generated for each row in the dataframe\n",
    "kmeans_scores.labels_[0:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Neighbourhood</th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Population 2016</th>\n",
       "      <th>Working Age (25-54)</th>\n",
       "      <th>Avg. Total Income</th>\n",
       "      <th>Total Higher Education</th>\n",
       "      <th>Total Employment Rate</th>\n",
       "      <th>Long</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Total Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Waterfront.Communities.The.Island</td>\n",
       "      <td>1</td>\n",
       "      <td>65913</td>\n",
       "      <td>45105</td>\n",
       "      <td>70600</td>\n",
       "      <td>61990</td>\n",
       "      <td>78.2</td>\n",
       "      <td>-79.377202</td>\n",
       "      <td>43.633880</td>\n",
       "      <td>4.031065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Niagara</td>\n",
       "      <td>0</td>\n",
       "      <td>31180</td>\n",
       "      <td>23320</td>\n",
       "      <td>70623</td>\n",
       "      <td>28390</td>\n",
       "      <td>82.7</td>\n",
       "      <td>-79.412420</td>\n",
       "      <td>43.636681</td>\n",
       "      <td>2.466333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Willowdale.East</td>\n",
       "      <td>0</td>\n",
       "      <td>50434</td>\n",
       "      <td>25850</td>\n",
       "      <td>45326</td>\n",
       "      <td>44330</td>\n",
       "      <td>55.9</td>\n",
       "      <td>-79.401484</td>\n",
       "      <td>43.770602</td>\n",
       "      <td>2.284752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Islington.City.Centre.West</td>\n",
       "      <td>0</td>\n",
       "      <td>43965</td>\n",
       "      <td>20640</td>\n",
       "      <td>52787</td>\n",
       "      <td>37405</td>\n",
       "      <td>63.6</td>\n",
       "      <td>-79.543317</td>\n",
       "      <td>43.633463</td>\n",
       "      <td>2.174632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Woburn</td>\n",
       "      <td>0</td>\n",
       "      <td>53485</td>\n",
       "      <td>21945</td>\n",
       "      <td>30878</td>\n",
       "      <td>43410</td>\n",
       "      <td>51.9</td>\n",
       "      <td>-79.228586</td>\n",
       "      <td>43.766740</td>\n",
       "      <td>2.063534</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Neighbourhood  Cluster Labels  Population 2016  \\\n",
       "0  Waterfront.Communities.The.Island               1            65913   \n",
       "1                            Niagara               0            31180   \n",
       "2                    Willowdale.East               0            50434   \n",
       "3         Islington.City.Centre.West               0            43965   \n",
       "4                             Woburn               0            53485   \n",
       "\n",
       "   Working Age (25-54)  Avg. Total Income  Total Higher Education  \\\n",
       "0                45105              70600                   61990   \n",
       "1                23320              70623                   28390   \n",
       "2                25850              45326                   44330   \n",
       "3                20640              52787                   37405   \n",
       "4                21945              30878                   43410   \n",
       "\n",
       "   Total Employment Rate       Long        Lat  Total Score  \n",
       "0                   78.2 -79.377202  43.633880     4.031065  \n",
       "1                   82.7 -79.412420  43.636681     2.466333  \n",
       "2                   55.9 -79.401484  43.770602     2.284752  \n",
       "3                   63.6 -79.543317  43.633463     2.174632  \n",
       "4                   51.9 -79.228586  43.766740     2.063534  "
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#add clustering labels to neighbourhood_top20_df\n",
    "neighbourhood_top20_df.insert(1, 'Cluster Labels', kmeans_scores.labels_)\n",
    "\n",
    "neighbourhood_top20_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4 - Create Toronto Map\n",
    "### Final output will include a map of the Top-20 neighbourhoods in which a condominium developer should focus on expanding into. The neighbourhoods are clustered by total score and 3 clusters were used in KMeans clustering."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create map of Toronto using first entries latitude and longitude values\n",
    "map_toronto = folium.Map(location=[neighbourhood_top20_df[\"Lat\"][0], neighbourhood_top20_df[\"Long\"][0]], zoom_start=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set color scheme for the clusters\n",
    "x = np.arange(3)\n",
    "ys = [i + x + (i*x)**2 for i in range(3)]\n",
    "colors_array = cm.prism(np.linspace(0, 1, len(ys)))\n",
    "rainbow = [colors.rgb2hex(i) for i in colors_array]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x16458fdfc48>"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add markers to the map\n",
    "markers_colors = []\n",
    "for lat, lon, poi, cluster in zip(neighbourhood_top20_df['Lat'], neighbourhood_top20_df['Long'], neighbourhood_top20_df['Neighbourhood'], neighbourhood_top20_df['Cluster Labels']):\n",
    "    label = folium.Popup(str(poi) + ' ~~~' + ' Cluster: ' + str(cluster), parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lon],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color=rainbow[cluster-1],\n",
    "        fill=True,\n",
    "        fill_color=rainbow[cluster-1],\n",
    "        fill_opacity=0.9).add_to(map_toronto)\n",
    "       \n",
    "map_toronto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
